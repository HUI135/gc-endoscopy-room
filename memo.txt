코드 로직 정리
1. 초기 설정
목적: 2025년 4월의 평일 근무 스케줄을 생성하고 관리.
주요 변수 및 데이터 구조:
current_cumulative: 오전/오후 근무 횟수를 추적하는 딕셔너리 ({'오전': {}, '오후': {}}).
weekdays: 2025년 4월의 평일 날짜 리스트.
week_numbers: 날짜별 주차 정보 (1주차, 2주차 등).
day_map: 요일 매핑 (월: 0, 화: 1, ...).
df_final: 최종 근무 스케줄을 저장하는 데이터프레임 (날짜, 요일, 주차, 시간대, 근무자, 상태, 메모, 색상).
2. 데이터프레임 로드 확인
입력 데이터프레임:
df_master: 기본 근무 스케줄 (시간대별 근무자 목록).
df_supplement: 보충 근무자 목록.
df_request: 근무 요청 정보 (휴가, 필수 근무, 보충 불가/어려움).
df_cumulative: 근무자별 누적 근무 횟수.
동작: 각 데이터프레임의 상위 5개 행을 출력하여 데이터 로드 상태 확인.
3. 날짜 범위 파싱 함수 (parse_date_range)
목적: 날짜 문자열을 파싱하여 유효한 평일 날짜 리스트를 반환.
입력 형식:
단일 날짜: 2025-04-01
날짜 범위: 2025-04-01~2025-04-03
여러 날짜: 2025-04-01,2025-04-03
동작:
입력 문자열을 파싱하여 유효한 날짜를 추출.
평일(월~금)인 날짜만 포함.
잘못된 형식은 무시하고 에러 메시지 출력.
출력: 유효한 날짜 문자열 리스트 (예: ['2025-04-01', '2025-04-02']).
4. 근무자 상태 업데이트 함수 (update_worker_status)
목적: df_final에 근무자의 상태를 업데이트하거나 새로 추가.
입력:
df: df_final 데이터프레임.
date_str: 날짜 (예: '2025-04-01').
time_slot: 시간대 ('오전' 또는 '오후').
worker: 근무자 이름.
status: 상태 (예: '근무', '제외', '보충').
memo: 메모 (상태에 대한 설명).
color: 색상 (상태 시각화를 위한 표시).
동작:
해당 날짜, 시간대, 근무자가 이미 df_final에 존재하면 상태, 메모, 색상을 업데이트.
없으면 새로운 행으로 추가 (날짜, 요일, 주차, 시간대, 근무자, 상태, 메모, 색상 포함).
출력: 업데이트된 df_final.
5. 근무 배정 로직
목적: 각 평일에 대해 오전/오후 근무자를 배정.
주요 단계:
휴가자 및 요청 사전 처리:
df_request에서 해당 날짜의 요청사항을 파싱.
휴가자, 필수 근무자, 보충 불가/어려움 근무자를 분류.
df_master에 해당 시간대 근무자로 등록된 휴가자만 df_final에 추가 (상태: 제외, 메모: 휴가로 제외됨, 색상: 🔴 빨간색).
초기 근무자 배치:
df_master에서 해당 시간대 근무자 목록 가져오기.
휴가자 제외.
필수 근무자 추가.
오후 근무자는 오전 근무자 중에서 선택 (필수 근무자 제외).
초기 근무자를 df_final에 추가 (상태: 근무, 색상: 기본 또는 🟠 주황색).
6. 기본 보충/제외 및 추가 보충/제외
목적: 각 날짜 및 시간대별로 근무자 수를 목표치(오전: 12명, 오후: 5명)에 맞추기 위해 보충 및 제외 수행.
주요 단계:
기본 보충/제외:
초과/부족 날짜 확인:
근무자 수가 목표치보다 많으면 excess_dates에 추가.
근무자 수가 목표치보다 적으면 shortage_dates에 추가.
첫 번째 매칭 (초과 -> 부족):
초과 날짜에서 부족 날짜로 근무자를 이동.
이동 조건: 필수 근무자, 이미 이동한 근무자 제외, 부족 날짜의 보충 근무자 목록에 포함되어야 함.
이동 시 df_final 업데이트 (제외: 🔵 파란색, 보충: 🟢 초록색).
두 번째 매칭 (부족 -> 초과):
역방향으로 부족 날짜에서 초과 날짜로 근무자 이동.
동일한 조건 적용.
디버깅 출력:
기본 보충/제외 전 근무자 수와 명단.
보충/제외 결과 (보충된 근무자, 제외된 근무자, 최종 근무자 수와 명단).
추가 보충/제외:
보충 가능 근무자 확인:
df_supplement에서 보충 근무자 목록 가져오기.
휴가자 및 보충 불가 근무자 제외.
오후 시간대에서는 오전에 보충된 근무자 추가.
추가 보충:
근무자 수가 목표치보다 적으면 보충 근무자 중 누적 근무 횟수가 적은 순으로 추가.
오후 시간대에서는 오전 근무자 중에서만 선택 (필수 근무자 제외).
df_final 업데이트 (상태: 보충, 메모: 인원 부족으로 인한 추가 보충, 색상: 🟡 노란색).
추가 제외:
근무자 수가 목표치보다 많으면 누적 근무 횟수가 많은 순으로 제외.
필수 근무자와 초기 근무자 보호 (우선 제외 대상에서 제외).
df_final 업데이트 (상태: 제외, 메모: 인원 초과로 인한 추가 제외, 색상: 🟣 보라색).
오전에 제외된 근무자는 오후에도 제외 (오전 제외로 인한 오후 제외).
디버깅 출력:
보충 가능 근무자 목록.
추가 보충/제외 결과 (추가 보충된 근무자, 추가 제외된 근무자, 최종 근무자 수와 명단).
7. 최종 검증
목적: 특정 날짜(4월 28일~30일)의 오후 근무자 수와 명단 확인.
동작:
해당 날짜 및 시간대의 근무자 수와 명단을 출력.
목표치(5명)와 비교하여 일치 여부 확인.
주요 특징
휴가자 처리:
df_master에 해당 시간대 근무자로 등록된 휴가자만 df_final에 추가.
예: 4월 1일 휴가자가 오전에만 df_master에 있으면 오전에만 df_final에 표시.
근무자 보호:
필수 근무자와 초기 근무자는 제외 대상에서 제외.
오후 근무 제약:
오후 근무자는 오전 근무자 중에서만 선택 (필수 근무자 제외).
디버깅 출력:
기본 보충/제외와 추가 보충/제외 단계를 통합하여 각 단계별 근무자 수와 명단 출력.
보충/제외된 근무자를 명확히 표시.
누적 근무 관리:
current_cumulative과 df_cumulative를 통해 근무 횟수 추적.
보충 시 누적 근무 횟수가 적은 근무자 우선, 제외 시 누적 근무 횟수가 많은 근무자 우선.